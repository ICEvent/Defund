type VotingStatus = 
 record {
   approvalVotePower: nat;
   endTime: int;
   rejectVotePower: nat;
   startTime: int;
   totalVotePower: nat;
   votes: vec Vote;
 };
type VotingPower = 
 record {
   powerHistory: vec PowerChange;
   totalPower: nat;
   userId: principal;
 };
type VoteType = 
 variant {
   approve;
   reject;
 };
type Vote = 
 record {
   grantId: int;
   timestamp: int;
   votePower: nat;
   voteType: VoteType;
   voterId: principal;
 };
type Status = 
 variant {
   approved;
   cancelled;
   expired;
   rejected;
   review;
   submitted;
   voting;
 };
type Result = 
 variant {
   err: text;
   ok: nat;
 };
type PowerChange = 
 record {
   amount: nat;
   source: Donation;
   timestamp: int;
 };
type NewGrant = 
 record {
   amount: nat;
   category: text;
   currency: Currency__1;
   description: text;
   proofs: vec text;
   recipient: principal;
   title: text;
 };
type Grant = 
 record {
   amount: nat;
   applicant: principal;
   category: text;
   currency: Currency__1;
   description: text;
   grantId: int;
   grantStatus: Status;
   proofs: vec text;
   recipient: principal;
   submitime: int;
   title: text;
   votingStatus: opt VotingStatus;
 };
type Donation = 
 record {
   amount: nat;
   currency: Currency;
   donorId: principal;
   timestamp: int;
   txid: text;
 };
type Currency__1 = 
 variant {
   ICP;
   ckBTC;
   ckETH;
   ckUSDC;
 };
type Currency = 
 variant {
   ICP;
   ckBTC;
   ckETH;
   ckUSDC;
 };
service : {
  applyGrant: (NewGrant) -> (Result);
  cancelGrant: (nat) -> (Result);
  donate: (nat, Currency, text) -> (Result);
  finalizeGrantVoting: (nat) -> (Result);
  getAllGrants: () -> (vec Grant) query;
  getDonorCredit: (text) -> (opt nat) query;
  getGrant: (nat) -> (opt Grant) query;
  getGrantVotingStatus: (nat) -> (opt VotingStatus) query;
  getGrants: (vec Status, nat) -> (vec Grant) query;
  getMyGrants: () -> (vec Grant) query;
  getVotingPower: (principal) -> (opt VotingPower) query;
  startGrantVoting: (nat) -> (Result);
  updateExchangeRates: (Currency, nat) -> (Result);
  voteOnGrant: (nat, VoteType) -> (Result);
}
